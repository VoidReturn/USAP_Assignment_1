#!/bin/bash

#global variables
#the results.txt file is used for storing found passwords; common and dict are used to store respective lists of passwords to test
RESULTS="results.txt"
COMMON="common_passwords.txt"
DICT="linux.words"
#SLEEP_TIME sets how long the script wait between each test; RUN_LIMIT is the time in seconds before the script should abort a test
SLEEP_TIME=0.1
RUN_LIMIT=120

#function for comparing a supplied password hash against a supplied password list
#supplied arguements should be username passwordhash passwordlist
#note: this function will be used for both the common passwords attack and the dictionary attack
pass_comparison() {
	if [ $# -lt 3 ]; then
		echo "invalid function argument"
		return -1
	fi
	pass_list="$3"
	test_cutoff=0
	while read -r test;  do
		if [ $test_cutoff -gt 1000 ]; then
			echo "testing limit reached; aborting attack"
			return 1;
		fi
		let "test_cutoff++"
		test_hash=$(echo -n "$test"|sha256sum|awk '{print $1}')
		#echo "trying $test"
		sleep $SLEEP_TIME
		if [ "$test_hash" == "$password" ]; then
			echo "$username $test $password" >> $RESULTS
			return 0
		fi
	done < "$pass_list";
}

brute_attack() {
	test_cutoff=0
	for test in {a..z}{a..z}{a..z}{a..z}; do
		if [ $test_cutoff -gt 10000 ]; then
			echo "testing limit reached; aborting attack"
			return 1;
		fi	
		test_hash=$(echo -n "$test"|sha256sum|awk '{print $1}')
		sleep $SLEEP_TIME
		if [ "$test_hash" == "$password" ]; then
			echo "$username $test $password" >> $RESULTS
			return 0;
		fi
		echo "$test"
	done
}

#clear out the results.txt file of any previous matchs
> $RESULTS
echo "reading file..."
while IFS=':' read -r username password <&0; do
	echo "testing $username against common passwords"
	#pass_comparison $username $password $COMMON
	if egrep $username $RESULTS; then
		continue
	fi 
	echo "testing $username against dictionary"
	#pass_comparison $username $password $DICT
	if egrep $username $RESULTS; then
		continue
	fi 
	echo "testing $username against brute force"
	#brute_attack $username $password
done

echo "printing results"

